import musicbrainzngs
from colorthief import ColorThief #type: ignore
import io

# Set application details and contact
musicbrainzngs.set_useragent("Album_Poster_Generator", "1.0", "kisituaaron@gmail.com")

#gets the ID for the album release group
def get_releasegroupid(search_album, search_artist):
    try:
        #search for the album using the name and artist provided
        result = musicbrainzngs.search_release_groups(artist = search_artist, releasegroup = search_album)

        if result['release-group-list']: #if the album was found using the search return the id
            album = result['release-group-list'][0]
            return album['id']

        else:
            print("Could Not find release group")

    except musicbrainzngs.WebServiceError as e:
        print(f"an error occured(release group id): {e}")

#uses release group ID to get the ID of the first release(album) within the release group
def get_releaseID_from_releasegroup(release_groupID):
    try:
        #get the release group by the ID we found, include all the release versions
        result = musicbrainzngs.get_release_group_by_id(release_groupID, includes=["releases"])

        #check if the release-group and releases(album) keys are in result
        if 'release-group' in result and 'release-list' in result['release-group']:
            album = result['release-group']['release-list']

            #if there are any releases(albums) within the release group, return the first one
            if album:
                return album[0]['id']
            
        else:
            print("could not find release(album) within the release group")

    except musicbrainzngs.WebServiceError as e:
        print(f"an error occured(release ID): {e}")

#attempt to download the album cover
def get_cover(album_id):
    try:
        cover = musicbrainzngs.get_image_front(releaseid=album_id)
        return cover

    except musicbrainzngs.WebServiceError as e:
        print(f"An error occurred(cover): {e}")

#gets the tracklist
def get_tracklist(album_id):
    try:
        #gets the release(album) by the id, including the list of recordings
        result = musicbrainzngs.get_release_by_id(album_id, includes=["recordings"])
        
        #if there is a list of mediums that the release(album) is on (cd, digital, cassette, etc)
        if 'medium-list' in result['release']:
            tracklist = set()

            #for each medium the release(album) is on
            for medium in result['release']['medium-list']:

                #for each track within that medium, add it to the tracklist using a set to prevent duplicates
                for track in medium['track-list']:
                    track_title = track['recording']['title']
                    tracklist.add(track_title)

        #turn the set back into a list and return it
        return list(tracklist)


    except musicbrainzngs.WebServiceError as e:
        print(f"An error occurred(tracks): {e}")

#get the most used colors in album cover
def get_palette(album_cover):
    #turns the album cover into an image that colortheif can use
    colors = ColorThief(io.BytesIO(album_cover))

    #gets the 5 most prominent colors from the image and returns them
    palette = colors.get_palette(color_count = 5)
    return palette

#get duration of album
def get_duration(album_id):
    try:
        #gets the release(album) by the id, including the list of recordings
        result = musicbrainzngs.get_release_by_id(album_id, includes=["recordings"])

        total_len_ms = 0
        
        #if there is a list of mediums that the release(album) is on (cd, digital, cassette, etc)
        if 'medium-list' in result['release']:
            #for each medium the release(album) is on
            for medium in result['release']['medium-list']:
                #for each track within that medium, add it to the tracklist using a set to prevent duplicates
                for track in medium['track-list']:
                    #add the length of each track to the total length
                    if 'length' in track:
                        total_len_ms += int(track['length'])
        
        #gets turns the ms to minutes and seconds
        minutes = total_len_ms // 60000
        seconds = (total_len_ms % 60000) // 1000

        #formats the minutes and seconds, and a 0 infront of the second val if its only 1 digit
        if len(str(seconds)) == 2:
            time_str = str(minutes) + ":" + str(seconds)
        else:
            time_str = str(minutes) + ":0" + str(seconds)

        return time_str


    except musicbrainzngs.WebServiceError as e:
        print(f"An error occurred(length): {e}")

#gets label info about album
def get_label_info(album_id):
    try:
        #gets the release(album) by the id, including the label
        result = musicbrainzngs.get_release_by_id(album_id, includes=["labels"])

        label_str = "Released by "
        
        #if there is section for label info in the result
        if 'label-info-list' in result['release']:
            #for each label info item in the label info list
            for i, label_info in enumerate(result['release']['label-info-list']):

                #retrieves the label from the label info item
                label = label_info.get('label')

                #if there is no label
                if label['name'] == "[no label]":
                    label_str = "Released Independently"
                    return label_str

                #if there is at least 1 label
                else:
                    # If the label is not the final one in the label info list
                    if i != len(result['release']['label-info-list']) - 1:
                        label_str += label['name'] + ", "
                    # If the label is the final one in the label info listlist
                    else:
                        label_str += label['name']

        return label_str

    except musicbrainzngs.WebServiceError as e:
        print(f"An error occurred(label): {e}")

#get album release date
def get_release_date(album_id):
    try:
        #gets the release(album) by the id, including the label
        result = musicbrainzngs.get_release_by_id(album_id)

        if 'date' in result['release']:
            return result['release']['date']

    except musicbrainzngs.WebServiceError as e:
        print(f"An error occurred(date): {e}")

#gets the name of the album
def get_album_name(album_id):
    try:
        result = musicbrainzngs.get_release_by_id(album_id)

        if 'title' in result['release']:
            return result['release']['title']

    except musicbrainzngs.WebServiceError as e:
        print(f"An error occurred(album name): {e}")

#gets the name of the artist
def get_artist_name(album_releasegroupid):
