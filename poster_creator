import pygame
import pygame.image
import io
import datetime

# Set the dimensions of the image(poster size), color squares, 
width, height = 2304, 3456
color_width, color_height = 100, 100
top_margin, bottom_margin, left_margin, right_margin = 150, 3306, 150, 2154
marginalized_width, marginalized_height, marginalized_center = 2004, 3156, 1002
text_portion_y = 2254
info_font_size, album_name_font_size, artist_name_font_size = 40, 300, 90
artist_name_x, artist_name_y = marginalized_center + 500, 2900 #+500 being the offset from center and 2900 being random height near bottom
album_name_x, album_name_y = marginalized_center + 500, 2900 + artist_name_font_size #+500 being the offset from center


# Set font parameters
tracks_font_size_big = 80
track_font_size_small = 60
font_color = (0, 0, 0)
font_name = pygame.font.get_default_font()

#reformats the date
def format_date(raw_date):

    #splits the date format into year, month, day
    year, month, day = raw_date.split('-')

    #year and day dont matter here(put my birthday as filler)
    month_name = datetime.date(2004, int(month), 25).strftime('%B')

    #return date with month name instead of number
    return f"{day} {month_name} {year}"

#prevents albums with multiple labels from taking up too much of the screen
def info_wrap_text(surface, font, text, color, max_width, starting_x, starting_y):

    #splits the text into words and creates an array for the lines
    words = text.split(' ')
    lines = []
    current_line = ''

    #for each word if the word doesnt cause the current line to reach the maximum width we add it to the current line, otherwise start a new line
    for i, word in enumerate(words):

        if i == 0:
            current_line += word
            continue

        if font.size(current_line + ' ' + word)[0] <= max_width:
            current_line += ' ' + word
        else:
            lines.append(current_line)
            current_line = word

    lines.append(current_line)

    #places the lines onto the screen
    for line in lines:
        text_surface = font.render(line, True, color)
        text_rect = text_surface.get_rect(topleft=(starting_x, starting_y))
        surface.blit(text_surface, text_rect)
        starting_y += text_rect.height

    return text_surface, text_rect

#places album name in bottom right corner
def fit_album(screen, album_font, album_name, font_color, marginalized_width, marginalized_center, text_portion_horizontal_center, album_name_x, album_name_y):
    #check if the album title can be put at the starting album_name_x and album_name_y without running into the right margin, if it cant work through the following steps
    #1. keep moving the album title topleft x 50 pixels to the left while maintaining the font size, if the next movement would hit or pass the marginalized center and the album text bottom right pixel would still pass the right margin then stop moving left and move to step 2 as this step has failed
    #2. place the album title top left x at the marginalized_center. Then move album text top left y up enough that the text can be wrapped into two lines while maintaining the same font size, ensuring that the text in the first line ends at the right margin, and that the text in the second line is allowed to continue until finished. If the album text bottom right x is passed the right margin then this step has failed, move to step 3
    #3. if neither of the previous two steps work, then reduce the font size by 50 pixels and start at step one again
    #keep going through these steps until one of the steps results in an album text that does not pass the right margin

def create_poster(cover, tracklist, palette, album_length, label_info, release_date, album_name, artist_name):

    # Initialize Pygame
    pygame.init()

    # Create a background and sets background color
    screen = pygame.Surface((width, height))
    screen.fill((255, 255, 240))

    #turns the musicbrainz image to an image that pygame can use
    image_data = io.BytesIO(cover)
    image_surface = pygame.image.load(image_data)

    # Scale the image to fit the surface, want it to take up entire marginalized width
    image_surface = pygame.transform.scale(image_surface, (marginalized_width, marginalized_width))

    #places the image on the screen
    screen.blit(image_surface, (left_margin,top_margin))

    # Load font for the columns
    track_font_big = pygame.font.Font(font_name, tracks_font_size_big)
    track_font_small = pygame.font.Font(font_name, track_font_size_small)

    #if the number of tracks is less than or equal to 13, only one column is needed
    if (len(tracklist) <= 13):
        #starts the tracklist a little under the image
        start_y_tracks = text_portion_y

        # Render text onto the surface
        for i,track in enumerate(tracklist):     
            text_surface = track_font_big.render(str(i + 1) + "." + track, True, font_color)

            # Blit the text surface onto the screen
            text_rect = text_surface.get_rect(topleft=(left_margin, start_y_tracks))
            screen.blit(text_surface, text_rect)
            start_y_tracks += 80
        
        #used for info box placement
        last_track_y = start_y_tracks

    #if the number of tracks is more than 13 but less than 26
    elif (len(tracklist) > 13 and len(tracklist) <= 26):
        # Determine the longest track in the first column
        longest_track = max(tracklist[:13], key=len)

         # Calculate the width of the longest track
        longest_track_width, _ = track_font_small.size(longest_track)

        # Calculate the x-coordinate for the second column
        column_x = left_margin + longest_track_width + 15  # 15 pixels to the right of the longest track

       # Starts the tracklist a little under the image
        start_y_tracks1 = text_portion_y
        start_y_tracks2 = text_portion_y

        # Render text onto the surface
        for i, track in enumerate(tracklist):
            if i <= 13:
                text_surface = track_font_small.render(str(i + 1) + "." + track, True, font_color)

                # Blit the text surface onto the screen for the first column
                text_rect = text_surface.get_rect(topleft=(left_margin, start_y_tracks1))
                screen.blit(text_surface, text_rect)
                start_y_tracks1 += 60
            else:
                text_surface = track_font_small.render(str(i + 1) + "." + track, True, font_color)

                # Blit the text surface onto the screen for the second column
                text_rect = text_surface.get_rect(topleft=(column_x, start_y_tracks2))
                screen.blit(text_surface, text_rect)
                start_y_tracks2 += 60
        
        #used for info box placement
        last_track_y = start_y_tracks1

    #if more than 26 tracks
    else:
        print("too many songs on album, please try again")
        return

    #sets the top right of the square to be a 200 below image and 150 off the right edge
    top_right_x_squares = right_margin
    top_y_squares = marginalized_width + 200

    #for each color in the color palette
    for color in palette:
        #set the top left x coordinate of the square to be the top right x minus the width of the square
        top_left_x_squares = top_right_x_squares - color_width

        #places the rectangle on the screen and sets a gap between this square and the next one on the left
        pygame.draw.rect(screen, color, (top_left_x_squares, top_y_squares, color_width, color_height))
        top_right_x_squares = top_left_x_squares - 10

    #loads info font, places it 20 below the last track
    info_font = pygame.font.SysFont("courier new", info_font_size)
    info_starting_y = last_track_y + 40

    #add the release date to the album length
    length_year = album_length + " / " + format_date(release_date)

    #places length and year text onto screen
    length_year_text_surface = info_font.render(length_year, True, font_color)
    length_year_text_rect = length_year_text_surface.get_rect(topleft=(left_margin, info_starting_y))
    screen.blit(length_year_text_surface, length_year_text_rect)

    #for putting the labels below the length and date, set to font size
    label_starting_y = info_starting_y + info_font_size

    #places label text onto screen
    label_text_surface = info_font.render(label_info, True, font_color)
    info_wrap_text(screen, info_font, label_info, font_color, marginalized_center, left_margin, label_starting_y)

    # Places album name on screen
    album_font = pygame.font.SysFont("Futura", album_name_font_size)
    album_text_surface, album_text_rect = fit_album(screen, album_font, album_name, font_color, marginalized_width, marginalized_center, text_portion_horizontal_center, album_name_x, album_name_y)

    # Places artist name on screen
    artist_font = pygame.font.SysFont("courier new", artist_name_font_size)

    # Attempt to render artist name text
    artist_text_surface = artist_font.render(artist_name, True, font_color)
    artist_text_rect = artist_text_surface.get_rect(topleft=(artist_name_x, artist_name_y))

    # Check if artist name text overlaps album name text
    if artist_text_rect.colliderect(album_text_rect):
        # Reduce font size and try again
        artist_font = pygame.font.SysFont("courier new", artist_name_font_size - 10, bold=True)
        artist_text_surface = artist_font.render(artist_name, True, font_color)
        artist_text_rect = artist_text_surface.get_rect(topleft=(artist_name_x, artist_name_y))

    # Blit artist name text onto the screen
    screen.blit(artist_text_surface, artist_text_rect)
    
    # Save the poster as a jpg
    file_name = 'generated_image.jpg'
    pygame.image.save(screen, file_name)
    print(f"Image saved as {file_name}")

    # Quit Pygame
    pygame.quit()
    
